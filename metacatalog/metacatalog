if __name__=='__main__':
    import argparse

    from metacatalog import __version__ as VERSION
    from metacatalog.cmd import empty, create, populate, connection, init

    # build the main Argument parser
    parser = argparse.ArgumentParser(
        description="MetaCatalog management CLI"
    )
    parser.add_argument("-v", "--version", action="store_true", help="Returns the module version")
    parser.add_argument("-C", "--connection", type=str, 
        help="Connection string to the database instance.Follows the syntax:\ndriver://user:password@host:port/database"
    )
    parser.add_argument("-V", "--verbose", action="store_true", help="Activate extended output.")
    parser.set_defaults(func=empty)

    # add subparsers
    subparsers = parser.add_subparsers(title="Commands", description="CLI commands")

    # create parser
    create_parser = subparsers.add_parser('create', parents=[parser], add_help=False, help="Create a new Metacatalog instance.")
    create_parser.set_defaults(func=create)

    # populate parser
    pop_parser = subparsers.add_parser('populate', parents=[parser], add_help=False, help="Populate the database with default auxiliary data.")
    # TODO:add the --ignore -I option to ignore tables from population
    pop_parser.add_argument("--ignore", "-I", nargs='+', help="List tables to be ignored for default population.")
    pop_parser.set_defaults(func=populate)

    # init parser
    init_parser = subparsers.add_parser('init', parents=[pop_parser], add_help=False, help="Runs the create and and the populate command.")
    init_parser.set_defaults(func=init)

    # connection parser
    conn_parser = subparsers.add_parser('connection', help="Manage stored connections")
    conn_parser.add_argument("--save", help="Saves the given connection string. Follows the syntax:\ndriver://user:password@host:port/database")
    conn_parser.add_argument("--name", help="If used with --save, specifies the name for the connection string. Else, only this string will be returned.")
    conn_parser.set_defaults(func=connection)

    # parse the arguments
    args = parser.parse_args()
    if args.version:
        print(VERSION)
    else:
        args.func(args)

